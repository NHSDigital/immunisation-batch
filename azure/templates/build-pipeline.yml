parameters:
  - name: service_name
    type: string
  - name: short_service_name
    type: string
  - name: variables
    type: object
    default: []
  - name: secret_file_ids
    type: object
    default: []
  - name: secret_ids
    type: object
    default: []
  - name: config_ids
    type: object
    default: []
  - name: post_lint
    type: stepList
    default: []
  - name: notify
    type: boolean
    default: true
  - name: python_version
    type: string
    default: "3.8"

jobs:
  - job: build
    displayName: Build & Test
    timeoutInMinutes: 30
    pool:
      name: 'AWS-ECS'
    workspace:
      clean: all
    variables:
      ${{ each var in parameters.variables }}:
        ${{ var.key }}: ${{ var.value }}
    steps:

      - bash: |
          if [ ! -z "$(ls -A \"$(Pipeline.Workspace)/s/${{ parameters.service_name }}\" 2>/dev/null)" ]; then
            echo "workspace directory is not empty!"
            exit 1
          fi
        displayName: "Check workspace is clean"
        
      - bash: |
          instance_id="$(curl -s http://169.254.169.254/latest/meta-data/instance-id)"
          echo instance-id: "${instance_id}"
          echo connect to: https://eu-west-2.console.aws.amazon.com/systems-manager/session-manager/${instance_id}
          echo sudo su - ubuntu
          or
          echo ssh ubuntu@${instance_id}
          echo working directory: $(System.DefaultWorkingDirectory)
        displayName: Print AWS info
        
      - template: azure/components/aws-clean-config.yml@common

      - ${{ if parameters.notify }}:
        - template: azure/components/aws-assume-role.yml@common
          parameters:
            role: "auto-ops"
            profile: "apm_ptl"

        - template: azure/components/get-aws-secrets-and-ssm-params.yml@common
          parameters:
            secret_file_ids:
              - ${{ each secret_file_id in parameters.secret_file_ids }}:
                - ${{ secret_file_id }}
            secret_ids:
              - ptl/access-tokens/github/repo-status-update/GITHUB_ACCESS_TOKEN
              - ${{ each secret_id in parameters.secret_ids }}:
                - ${{ secret_id }}
            config_ids:
              - /ptl/azure-devops/GITHUB_USER
              - ${{ each config_id in parameters.config_ids }}:
                - ${{ config_id }}

        - bash: |
            echo "Build.SourceBranch: $(Build.SourceBranch)"
            echo "Build.SourceBranchName: $(Build.SourceBranchName)"
            echo "Build.SourceVersion: $(Build.SourceVersion)"
            echo "Build.SourceVersionMessage: $(Build.SourceVersionMessage)"
            if [[ ! -z $(NOTIFY_COMMIT_SHA) ]]; then
                echo "##[debug]Using already provided NOTIFY_COMMIT_SHA=$(NOTIFY_COMMIT_SHA)"
            else
                NOTIFY_COMMIT_SHA=""
                if [[ "$(Build.SourceBranch)" =~ ^refs/tags/.+$ ]]; then
                    echo "##[debug]Build appears to be a tag build"
                    echo "##[debug]Using Build.SourceVersion as NOTIFY_COMMIT_SHA"
                    NOTIFY_COMMIT_SHA="$(Build.SourceVersion)"
                fi
                if [[ "$(Build.SourceBranch)" =~ ^refs/pull/.+$ ]]; then
                    echo "##[debug]Build appears to be a pull request build"
                    echo "##[debug]Extracting NOTIFY_COMMIT_SHA from Build.SourceVersionMessage"
                    NOTIFY_COMMIT_SHA=`echo "$(Build.SourceVersionMessage)" | cut -d' ' -f2`
                fi
                if [[ -z $NOTIFY_COMMIT_SHA ]]; then
                    echo "##[debug]Build does not appear to be pull or tag build"
                    echo "##[debug]Using Build.SourceVersion as NOTIFY_COMMIT_SHA"
                    NOTIFY_COMMIT_SHA="$(Build.SourceVersion)"
                fi
                echo "##vso[task.setvariable variable=NOTIFY_COMMIT_SHA]$NOTIFY_COMMIT_SHA"
            fi
          displayName: Set NOTIFY_COMMIT_SHA
          condition: always()
          
        - template: azure/components/update-github-status.yml@common
          parameters:
            state: pending
            description: "Build started"

      - bash: |
          if [[ ! -z $(UTILS_PR_NUMBER) ]]; then
            echo "##[debug]Triggered from utils repository, PR_NUMBER=$(UTILS_PR_NUMBER)"
            echo "##vso[task.setvariable variable=PR_NUMBER]$(UTILS_PR_NUMBER)"
          else
            echo "##[debug]PR_NUMBER=$(System.PullRequest.PullRequestNumber)"
            echo "##vso[task.setvariable variable=PR_NUMBER]$(System.PullRequest.PullRequestNumber)"
          fi
        displayName: Set PR_NUMBER

      - checkout: self
        path: "s/${{ parameters.service_name }}"
        submodules: true

      - template: azure/templates/setup-build-name.yml@common
        parameters:
          service_name: "${{ parameters.service_name }}"

      - task: UsePythonVersion@0
        displayName: "Use Python ${{ parameters.python_version }}"
        inputs:
          versionSpec: ${{ parameters.python_version }}

      - bash: |
          n=0
          until [ "$n" -ge 3 ]
          do
            make install && break
            n=$((n+1))
          done
        displayName: Install project dependencies

      - bash: "make lint"
        displayName: Lint

      - ${{ each post_lint in parameters.post_lint }}:
          - ${{ post_lint }}

      # Add Unit Tests and Coverage Generation
      - bash: |
          coverage run -m unittest discover
          coverage html
        displayName: Run Unit Tests with Coverage

      - bash: |
          mkdir -p coverage_reports
          cp -r htmlcov/* coverage_reports/
        displayName: Copy Coverage Report to coverage_reports

      - bash: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          git add coverage_reports/*
          git commit -m "Upload coverage report"
          git push
        displayName: Commit and Push Coverage Report to Repo

      - ${{ if parameters.notify }}:
        - template: azure/components/update-github-status.yml@common
          parameters:
            state: success
            on_success: true
            description: "Build succeeded"

        - template: azure/components/update-github-status.yml@common
          parameters:
            state: failure
            on_failure: true
            description: "Build failed"